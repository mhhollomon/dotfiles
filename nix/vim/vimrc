"Tab Stop handling
set tabstop=4 softtabstop=4 expandtab shiftwidth=4 smarttab

"Turn off the mouse
set mouse=

if has('gui_running')
    if has('unix')
        let s:big_font = 'Source Code Pro 17'
        let s:sml_font = 'Source Code Pro 10'
    else
        let s:big_font = "Consolas:h12:cANSI:qDRAFT"
        let s:sml_font = "Consolas:h9:cANSI:qDRAFT"
    endif

    let &guifont=s:sml_font
    
    " hide the menu and toolbar by default
    set guioptions-=m
    set guioptions-=T

    " but give ourselves a way to get them back
    map ,gm :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>
    map ,gt :if &go=~#'T'<Bar>set go-=T<Bar>else<Bar>set go+=T<Bar>endif<CR>

    " Try to use true color if we can
    if exists('+termguicolors')
      let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
      let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
      set termguicolors
    endif
endif

" Toggle paste mode
map ,pp :if &paste==#0<Bar>set paste<Bar>else<Bar>set nopaste<Bar>endif<CR>


" Allow buffers to be open and windowless, even if changed.
set hidden

" Set things up a little more comfortably when working remotely
"
let s:remote_mode = 0
function! ToggleRemoteMode()
   if s:remote_mode == 0
      let s:remote_mode = 1
      let &guifont=s:big_font
   else
      let s:remote_mode = 0
      let &guifont=s:sml_font
   endif
endfunction
nnoremap ,rem :call ToggleRemoteMode()<CR>


" Allow status lines to be selected or hidden (show by default)

let s:hidden_all = 0
function! ToggleHiddenAll()
    if s:hidden_all  == 0
        let s:hidden_all = 1
        set noshowmode
        set noruler
        set laststatus=0
        set noshowcmd
    else
        let s:hidden_all = 0
        set showmode
        set ruler
        set laststatus=2
        set showcmd
    endif
endfunction

nnoremap <S-h> :call ToggleHiddenAll()<CR>

let s:hidden_all = 0

set showmode
set ruler
set laststatus=2
set showcmd

syntax on
filetype plugin indent on

" Make it super easy to edit .vimrc
noremap ,vim :new ~/.vimrc<cr>

" NERDTree support
map <C-o> :NERDTreeToggle<CR>

" Buffer navigation
map <C-n> :bn<CR>
map <C-p> :bp<CR>

" Move to the next buffer and close the one we started on.
map <C-w>d :bn<CR>:bd#<CR>

" Fancy version of the above
nmap <C-w>! <Plug>Kwbd

" Do awesome things with line numbers.
" # cribbed from https://jeffkreeftmeijer.com/vim-number/
set number relativenumber

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END
nmap ,nn :set number relativenumber<cr>
nmap ,nf :set nonumber norelativenumber<cr>

colorscheme onehalf

" lightline config
let g:lightline = {
   \ 'colorscheme' : 'solarized'
   \ }

" cmake
if executable("cmake")
    packadd vim-cmake
endif
