# Some applications read the EDITOR variable to determine your favourite text
# editor. So uncomment the line below and enter the editor of your choice :-)
export EDITOR=/usr/bin/vim

if [ -z "$USER" ]; then
    USER=$(id -un)
fi


#
# Set up common aliases and environment variables
#

IGNOREEOF=3

if [ ! -z "${DEVSHELL_PROJECT_ID}" ]; then
    export TERM=screen-256color
fi

#
# Platform specific setup
#

# Save path so, if we re-run ourselves, the path doesn't get needlessly long

if [ "${SAVED_PATH:-==Unset==}" = "==Unset==" ]; then
    export SAVED_PATH="${PATH}"
else
    export PATH="${SAVED_PATH}"
fi

# Some systems have less, some don't - if we don't, just use more

if ( type less > /dev/null 2>&1 ); then
    export LESS="-ImRs"
    export PAGER="less"
else
    alias less="more"
    export MORE="-is"
fi

# For 'ls', use colors if we have them (and use LS_OPTIONS if it exists)

if [ $(uname -s) = "Linux" -a -f /etc/SuSE-release ]; then
    if [ "${LS_OPTIONS}" != "" ]; then
	export LS_OPTIONS="${LS_OPTIONS} -p"
    else
	alias ls="ls -N --color=tty -T 0 -p"
    fi
else
    alias ls="ls -p"
fi

# Generic settings by O/S

export PATH=/usr/local/bin:$PATH

if [ -d "$HOME/bin" ]; then
   export PATH=$HOME/bin:$PATH
fi

if [ -d "$HOME/.local/bin" ]; then
    export PATH="$PATH:$HOME/.local/bin"
fi

case `uname -s` in

    Linux)
        export PATH=$PATH:/usr/sbin

        export PS1="\u:\W> "
        ;;

    *)
        ;;
esac

# If ccache is installed, then add it to head of path
# (easiest way for cmake to use it without command line options)

if [ -d /usr/lib64/ccache ]; then
   export PATH="/usr/lib64/ccache:$PATH"
fi

#
# Support for go (language)
#

if [ -d "${HOME}/golang" ]; then
    export PATH="${HOME}/golang/bin:$PATH"
fi

if [ -d "${HOME}/go" ]; then
    export PATH="${HOME}/go/bin:$PATH"
fi

if [ -d "${HOME}/.linuxbrew" ]; then
    # needs to go on front since we want to override
    # vendor supplied packages
    export PATH="${HOME}/.linuxbrew/bin:${PATH}"
    export MANPATH="$(brew --prefix)/share/man:$MANPATH"
    export INFOPATH="$(brew --prefix)/share/info:$INFOPATH"
fi
#
# Functions
#

# Function: global_find
#
# Search for a string globally throughout a directory structure
#
# Parameters:
#   String to search	(Typically quoted) String to search for
#   Search Path		Directory search path to begin searching at

global_find_usage()
{
    echo "Usage: global_find <search-string> <search-path>" 1>&2
}

global_find()
{
    if [ -z "${1}" -o -z "${2}" ]; then
	global_find_usage
	return 1;
    fi

    echo "Starting search for string \"$1\" in file path \"$2\" ..."

    # Only Linux appears to have '-0' for xargs ...
    if [ $(uname -s) = "Linux" ]; then
	find $2 -type f -print0 | xargs -0 grep -i "$1"
    else
	find $2 -type f | xargs grep -i "$1"
    fi
}

if [ -f "/google/devshell/bashrc.google" ]; then
    source "/google/devshell/bashrc.google"
fi

if [ -f ~/.bashrc ]; then
    . ~/.bashrc
fi

# Function update our dotfiles from the github repo.
# First check the status for local changes. Don't
# update if we find some.
# Also, let a machine opt out by having a .NOCFG_UPDATE
# file in the home directory.
#

check_config()
{

    local expired=true

    # If .bash_profile is not a link, then we can't find
    # the local repo clone and we have no chance of success.
    #
    # If they have created .NOCFG_UPDATE, then they are opting
    # out of automated updates.
    #
    if [ ! -e ~/.NOCFG_UPDATE ] && [ -L ~/.bash_profile ]; then
        # figure out where we actuall live
        bf=$(dirname $(readlink -e ~/.bash_profile))

        #
        # The bash_profile will call this with 'maybe'
        # as an arg. When that appear, only do the update
        # if its has been at least 48 hours from the last one.
        # (assuming we can figure that out)
        #
        if [ "$1" = "maybe" ]; then
            if [ -e "${bf}/last_update" ]; then
                local file_time
                file_time=$(stat -c %Y -- "${bf}/last_update")
                if (( $(( $(date +%s) - ${file_time} )) < 17280 )); then
                    expired=false
                fi
            fi
        fi

        if [ "${expired}" = "true" ]; then
            ( cd $bf;
            gitstat=$(git status --short)
            if [ -z "$gitstat" ]; then
                # unfortunately, can't use recurse
                # because of some sub-sub-modules we don't want to pull.
                git pull --prune
                git submodule foreach git pull --prune
                touch "${bf}/last_update"
            else
                echo
                echo "--- Uncommited changes in " $bf "---"
                echo $gitstat
                echo
            fi
            )
        fi
    fi
}

# only do this if we are interactive
case "$-" in
    *i*) 
        # are we the only me logged in?
        cnt=$(ps -fu $USER | grep -e -bash | grep -v grep | wc -l)
        # 3 because the capture above will spawn a subshell.
        if  (( $cnt < 3 )); then
            check_config "maybe"
        fi
        ;;
esac
